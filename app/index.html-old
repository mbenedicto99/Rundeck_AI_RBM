<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Rundeck AI – Falhas x Alto Tempo (RBM)</title>
  <meta name="description" content="Painel estático que consome /app/ai_analysis.json e exibe KPIs, hotspots e amostras de risco." />
  <style>
    :root{--fg:#0f172a;--muted:#475569;--bg:#0b1220;--card:#0f172a;--ink:#e2e8f0;--line:#243041;--acc:#7dd3fc}
    *{box-sizing:border-box} html,body{height:100%}
    body{margin:0;background:#0b1220;color:#e2e8f0;font:14px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}
    h1,h2{margin:.2rem 0 1rem} h1{font-size:1.5rem} h2{font-size:1.1rem}
    .container{max-width:1200px;margin:0 auto;padding:16px}
    .header{display:flex;flex-direction:column;gap:.4rem;border-bottom:1px solid var(--line)}
    .sub{color:var(--muted);margin:.2rem 0}
    .badge{background:#132038;border:1px solid var(--line);padding:.2rem .5rem;border-radius:999px;color:#a5b4fc;font-size:.75rem}
    .grid{display:grid;grid-template-columns:1fr;gap:16px}
    @media(min-width:920px){.grid{grid-template-columns:1fr 1fr}}
    .card{background:#0f172a;border:1px solid var(--line);border-radius:12px;padding:14px}
    .kpis{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:10px}
    @media(min-width:920px){.kpis{grid-template-columns:repeat(7,minmax(0,1fr))}}
    .kpi{background:#0b1220;border:1px solid var(--line);border-radius:10px;padding:10px}
    .kpi-label{color:#94a3b8;font-size:.75rem}
    .kpi-value{font-size:1.2rem;font-weight:600}
    .table-wrap{overflow:auto;border:1px solid var(--line);border-radius:10px}
    table{width:100%;border-collapse:collapse;font-size:.9rem}
    thead{background:#0b1220;color:#cbd5e1}
    th,td{padding:10px;border-bottom:1px solid var(--line);white-space:nowrap}
    tr:hover td{background:#0b1220}
    .footer{display:flex;justify-content:space-between;align-items:center;border-top:1px solid var(--line);margin-top:16px}
    .ghost{background:transparent;border:1px solid var(--line);color:#e2e8f0;border-radius:8px;padding:.5rem .8rem;cursor:pointer}
    .ghost:hover{border-color:#334155;background:#101a2d}
    .hint{color:#94a3b8;text-align:center;padding:14px}
    canvas{width:100%;height:340px}
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js" defer></script>
</head>
<body>
  <header class="container header">
    <h1>Rundeck AI – Falhas x Alto Tempo</h1>
    <p class="sub">Modelo: BernoulliRBM · Fonte: /app/ai_analysis.json · Build estático</p>
    <div class="badges">
      <span class="badge" id="badge-updated" title="Última atualização do ai_analysis.json">Atualizando…</span>
    </div>
  </header>

  <main class="container">
    <!-- KPIs -->
    <section aria-labelledby="kpis-title" class="card">
      <h2 id="kpis-title">Resumo</h2>
      <div class="kpis">
        <div class="kpi"><div class="kpi-label">Registros</div><div class="kpi-value" id="kpi-total">–</div></div>
        <div class="kpi"><div class="kpi-label">Falhas</div><div class="kpi-value" id="kpi-failed">–</div></div>
        <div class="kpi"><div class="kpi-label">Alto tempo</div><div class="kpi-value" id="kpi-high">–</div></div>
        <div class="kpi"><div class="kpi-label">Eventos cruzados</div><div class="kpi-value" id="kpi-cross">–</div></div>
        <div class="kpi"><div class="kpi-label">Taxa cruzada</div><div class="kpi-value" id="kpi-cross-rate">–</div></div>
        <div class="kpi"><div class="kpi-label">ϕ (falha×alto)</div><div class="kpi-value" id="kpi-phi">–</div></div>
        <div class="kpi"><div class="kpi-label">Lift P(falha|alto)</div><div class="kpi-value" id="kpi-lift">–</div></div>
      </div>
    </section>

    <!-- Gráficos -->
    <section class="grid">
      <div class="card">
        <h2>Hotspots por Job (Eventos Cruzados)</h2>
        <canvas id="chartHotspots" aria-label="Barras de eventos cruzados por job" role="img"></canvas>
        <div id="hintHotspots" class="hint" hidden>Sem dados</div>
      </div>
      <div class="card">
        <h2>Risco Médio por Job (p95 como referência)</h2>
        <canvas id="chartRisk" aria-label="Risco médio e p95 por job" role="img"></canvas>
        <div id="hintRisk" class="hint" hidden>Sem dados</div>
      </div>
    </section>

    <!-- Tabelas -->
    <section class="card">
      <h2>Top Hotspots</h2>
      <div class="table-wrap">
        <table id="tbl-hotspots">
          <thead>
            <tr>
              <th>Projeto</th><th>Job</th><th>Eventos</th>
              <th>Risco médio</th><th>Risco p95</th><th>Duração média (s)</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </section>

    <section class="card">
      <h2>Top Amostras de Maior Risco</h2>
      <div class="table-wrap">
        <table id="tbl-samples">
          <thead>
            <tr>
              <th>Projeto</th><th>Job</th><th>Exec ID</th>
              <th>Início</th><th>Status</th><th>Duração (s)</th><th>Risco</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </section>
  </main>

  <footer class="container footer">
    <span>© 2025 • Rundeck AI Panel • RBM</span>
    <button id="btn-reload" class="ghost" type="button">Recarregar dados</button>
  </footer>

  <!-- Script principal -->
  <script type="module">
    const $ = (sel) => document.querySelector(sel);
    const fmt = (v, d=0) => (v ?? 0).toLocaleString('pt-BR', { maximumFractionDigits: d, minimumFractionDigits: d });

    // Sanear números: aceita "0,9", remove lixo, trata NaN/Infinity/null
    const toNum = (v, fallback=0) => {
      if (v === null || v === undefined) return fallback;
      if (typeof v === 'string') v = v.replace(',', '.').replace(/[^0-9eE.\-+]/g, '');
      const n = Number(v);
      return Number.isFinite(n) ? n : fallback;
    };

    // URL local (mesmo domínio). Usa baseURI para funcionar em subcaminhos do Amplify.
    const DATA_URL = new URL('./app/ai_analysis.json?ts=' + Date.now(), document.baseURI);

    let chartHotspots, chartRisk;

    async function loadData() {
      setStatus('Atualizando…');
      try {
        const res = await fetch(DATA_URL, { cache: 'no-store', credentials: 'same-origin', headers: { 'Accept': 'application/json' }});
        if (!res.ok) throw new Error('Falha ao carregar ai_analysis.json: ' + res.status);
        const data = await res.json();
        renderAll(data);
        setStatus('Atualizado');
      } catch (e) {
        console.error(e);
        setStatus('Erro ao carregar dados');
        renderAll(null);
      }
    }

    function setStatus(text) { $('#badge-updated').textContent = text; }

    function renderAll(d) {
      // -------- KPIs --------
      const r = d?.resumo || {};
      $('#kpi-total').textContent      = fmt(toNum(r.registros));
      $('#kpi-failed').textContent     = fmt(toNum(r.falhas));
      $('#kpi-high').textContent       = fmt(toNum(r.alto_tempo ?? r.altoTempo));
      $('#kpi-cross').textContent      = fmt(toNum(r.eventos_cruzados ?? r.eventosCruzados));
      $('#kpi-cross-rate').textContent = fmt(toNum(r.taxa_cruzada ?? r.taxaCruzada, 2), 2);
      $('#kpi-phi').textContent        = fmt(toNum(r.phi ?? r['phi_falha_alto'] ?? r.phi_falha_alto, 3), 3);
      $('#kpi-lift').textContent       = fmt(toNum(r.lift ?? r.lift_falha_alto ?? r['lift_falha_alto'], 2), 2);

      // -------- Tabelas --------
      fillTable('#tbl-hotspots tbody', d?.hotspots, (x) => `
        <tr>
          <td>${esc(x.projeto)}</td>
          <td>${esc(x.job)}</td>
          <td>${fmt(toNum(x.eventos))}</td>
          <td>${fmt(toNum(x.risco_medio ?? x.riscoMedio, 3), 3)}</td>
          <td>${fmt(toNum(x.risco_p95 ?? x.riscoP95, 3), 3)}</td>
          <td>${fmt(toNum(x.duracao_media_s ?? x.duracaoMediaS ?? x.duracao, 0))}</td>
        </tr>`);

      fillTable('#tbl-samples tbody', d?.top_amostras ?? d?.amostras ?? d?.samples, (s) => `
        <tr>
          <td>${esc(s.projeto)}</td>
          <td>${esc(s.job)}</td>
          <td>${esc(s.exec_id ?? s.execId ?? '')}</td>
          <td>${esc(s.inicio ?? s.start ?? '')}</td>
          <td>${esc(s.status ?? '')}</td>
          <td>${fmt(toNum(s.duracao_s ?? s.duracao ?? 0))}</td>
          <td>${fmt(toNum(s.risco ?? s.risk, 3), 3)}</td>
        </tr>`);

      // -------- Gráficos --------
      renderCharts(d);
    }

    function esc(s) { return (s ?? '').toString().replace(/[&<>"]/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m])); }

    function fillTable(sel, arr, rowFn) {
      const tbody = document.querySelector(sel);
      tbody.innerHTML = '';
      if (!Array.isArray(arr) || arr.length === 0) {
        tbody.innerHTML = `<tr><td colspan="7" style="text-align:center;color:#94a3b8">Sem dados</td></tr>`;
        return;
      }
      tbody.innerHTML = arr.map(rowFn).join('');
    }

    function renderCharts(d) {
      // --- Hotspots ---
      const hot = Array.isArray(d?.hotspots) ? d.hotspots : [];
      const hLabels = [];
      const hValues = [];
      for (const x of hot) {
        const val = toNum(x?.eventos, null);
        if (Number.isFinite(val)) { hLabels.push(String(x?.job ?? '—')); hValues.push(val); }
      }

      chartHotspots?.destroy();
      const hintH = $('#hintHotspots'); hintH.hidden = true;
      const ctxH = $('#chartHotspots').getContext('2d');
      if (hLabels.length && hValues.length) {
        chartHotspots = new Chart(ctxH, {
          type: 'bar',
          data: { labels: hLabels, datasets: [{ label: 'Eventos cruzados', data: hValues }] },
          options: {
            maintainAspectRatio: false,
            plugins: { legend: { display: false }, tooltip: { mode:'index', intersect:false } },
            scales: { x: { ticks: { autoSkip: true, maxRotation: 0 }}, y: { beginAtZero: true } }
          }
        });
      } else {
        ctxH.clearRect(0,0,ctxH.canvas.width,ctxH.canvas.height);
        hintH.hidden = false;
      }

      // --- Risco p95 / média ---
      const risco = Array.isArray(d?.risco_p95_por_job ?? d?.riscoPorJob) ? (d.risco_p95_por_job ?? d.riscoPorJob) : [];
      const rLabels = [];
      const rMed = [];
      const rP95 = [];
      for (const x of risco) {
        const med = toNum(x?.duracao_media ?? x?.duracaoMedia, null);
        const p95 = toNum(x?.p95, null);
        if (Number.isFinite(med) || Number.isFinite(p95)) {
          rLabels.push(String(x?.job ?? '—'));
          rMed.push(Number.isFinite(med) ? med : null);
          rP95.push(Number.isFinite(p95) ? p95 : null);
        }
      }

      chartRisk?.destroy();
      const hintR = $('#hintRisk'); hintR.hidden = true;
      const ctxR = $('#chartRisk').getContext('2d');
      const hasSeries = rLabels.length && ((rMed.filter(n=>n!==null).length) || (rP95.filter(n=>n!==null).length));
      if (hasSeries) {
        chartRisk = new Chart(ctxR, {
          type: 'line',
          data: {
            labels: rLabels,
            datasets: [
              { label: 'Duração média (s)', data: rMed, spanGaps: true },
              { label: 'p95 (s)', data: rP95, spanGaps: true }
            ]
          },
          options: {
            maintainAspectRatio: false,
            plugins: { legend: { position: 'bottom' }, tooltip: { mode:'index', intersect:false } },
            interaction: { mode: 'index', intersect: false },
            scales: { y: { beginAtZero: true } }
          }
        });
      } else {
        ctxR.clearRect(0,0,ctxR.canvas.width,ctxR.canvas.height);
        hintR.hidden = false;
      }
    }

    $('#btn-reload').addEventListener('click', loadData);
    window.addEventListener('DOMContentLoaded', loadData);

    // Log de erros não capturados (útil para debugar Chart.js ou JSON)
    window.addEventListener('error', e => console.error('Uncaught:', e.message));
  </script>
</body>
</html>
